// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And(a=instruction[15], b=instruction[3], out=writeM);

    Mux16(a=instruction, b=outMA, sel=instruction[15],out=inA);
    Not(in=instruction[15],out=not15);
    Or(a=not15, b=instruction[5],out=writeA);
    ARegister(in=inA, load=writeA,out=outA,out[0..14]=addressM);

    Mux16(a=outA, b=inM,sel=instruction[12], out=outAorM);

    And(a=instruction[15], b=instruction[4], out=writeD);
    DRegister(in=inD, load=writeD, out=outD);

    ALU(x=outD, y=outAorM, zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=inD,out=outMA,zr=outZr, ng=outNg);

    And(a=instruction[2], b=outNg, out=w0);
    And(a=instruction[1], b=outZr,out=w1);
    Or(a=outZr, b=outNg, out=outZrOrNg);
    Not(in=outZrOrNg, out=outPg);
    And(a=instruction[0], b=outPg, out=w2);
    Or(a=w0, b=w1, out=w3);
    Or(a=w2, b=w3, out=Jump);
    And(a=instruction[15],  b=Jump, out=writePC);

    PC(in=outA, load=writePC, inc=true, reset=reset, out[0..14]=pc);
}